
import spatial.dsl._


@spatial object LSTMAccelerator extends SpatialApp { 

	type T = Float  //Float = FltPt[_24, _8] = [_significant bits, _exponent bits]
	
	def matrix_mult(a_operand: Matrix[T], b_operand: Matrix[T]) : Matrix[T] = { 

		val a_rows = ArgIn[Int]
   		val a_cols = ArgIn[Int]
   		val b_rows = ArgIn[Int]
   		val b_cols = ArgIn[Int]
   		setArg(a_rows, a_operand.rows)
   		setArg(a_cols, a_operand.cols)
   		setArg(b_rows, b_operand.rows)
   		setArg(b_cols, b_operand.cols)

		val a = DRAM[T](a_rows, a_cols)
		val b = DRAM[T](b_rows, b_cols)
		val c = DRAM[T](a_rows, b_cols)

		setMem(a, a_operand)
		setMem(b, b_operand)

		Accel { 
			val a_sram = SRAM[T](a_rows, a_cols)
			val b_sram = SRAM[T](b_rows, b_cols)
			val c_sram = SRAM[T](a_rows, b_cols)

            MemReduce(c_sram)(a_cols by 1) { i => 
                val temp = SRAM[T](a_rows, b_cols)

                Foreach(a_rows by 1) { m =>
                	Foreach(b_cols by 1) { n =>
                    	temp(m, n) = a_sram(m, i) * b_sram(i, n)
                  	}
                }

                temp
            }{_+_}

            c store c_sram
		}

		getMatrix(c)  //return value
	}

	def LSTM_Cell (arg_input_gate: Matrix[T], arg_forget_gate: Matrix[T], arg_output_gate: Matrix[T], arg_memory_cell: Matrix[T], arg_output: Matrix[T], arg_state: Matrix[T]) = {
		//state = state * forget_gate + input_gate * memory_cell	
		//output = output_gate * tf.tanh(state)

		val state = SRAM[T](256)
		val output = SRAM[T](256)

		val state_data = arg_state*arg_forget_gate + arg_input_gate*arg_memory_cell
		setMem(state, state_data)

		val output_data = arg_output_gate*tanh(state_data)
		setMem(output, output_data)

		val result = DRAM[T](512)
		result(0::256) store state
		result(256::512) store output

		result

	}

	
	def main {
		
        val file_loc = "/home/akuam/spatial/apps/src/"
        //val bias_forget_file = io.Source.fromFile(file_loc + "bias_forget.csv")
    
        val bias_forget_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/bias_forget_final.csv", " ")
        val bias_f_mem = DRAM[T](256)
        setMem(bias_f_mem, bias_forget_array)
            
        val bias_input_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/bias_input_final.csv", " ")
        val bias_in_mem = DRAM[T](256)
        setMem(bias_in_mem, bias_input_array)
        
        val bias_memory_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/bias_memory_cell_final.csv", " ")
        val bias_m_mem = DRAM[T](256)
        setMem(bias_m_mem, bias_memory_array)
        
        val bias_output_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/bias_output_final.csv", " ")
        val bias_o_mem = DRAM[T](256)
        setMem(bias_o_mem, bias_output_array)
    
        //val bias_output_layer = SRAM[T](1)
        //val input = args(0.10646543651819229125976562500000).to[Float]
        //bias_output_layer(0,0) = args(0.10646543651819229125976562500000).to[Float]
        //val bias_olayer_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/bias_output_layer_final.csv", " ")
        //val bias_ol_mem = DRAM[T](1)
        //setMem(bias_ol_mem, bias_olayer_array)
        //bias_output_layer load input

        val weights_fg_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_forget_gate_final.csv", " ")
        val weights_fg_mem = DRAM[T](256)
        setMem(weights_fg_mem, weights_fg_array)
        
        val weights_fgh_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_forget_hidden_final.csv", " ")
        val weights_fgh_mem = DRAM[T](256, 256)
        setMem(weights_fgh_mem, weights_fgh_array)
        
        val weights_i_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_input_gate_final.csv", " ")
        val weights_i_mem = DRAM[T](256)
        setMem(weights_i_mem, weights_i_array)
        
        val weights_ih_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_input_hidden_final.csv", " ")
        val weights_ih_mem = DRAM[T](256, 256)
        setMem(weights_ih_mem, weights_ih_array)
        
        val weights_m_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_memory_cell_final.csv", " ")
        val weights_m_mem = DRAM[T](256)
        setMem(weights_m_mem, weights_m_array)
        
        val weights_mh_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_memory_cell_hidden_final.csv", " ")
        val weights_mh_mem = DRAM[T](256, 256)
        setMem(weights_mh_mem, weights_mh_array)
        
        val weights_o_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_output_final.csv", " ")
        val weights_o_mem = DRAM[T](256)
        setMem(weights_o_mem, weights_o_array)
        
        val weights_og_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_output_gate_final.csv", " ")
        val weights_og_mem = DRAM[T](256)
        setMem(weights_og_mem, weights_og_array)
        
        val weights_oh_array = loadCSV1D[T](s"akuam@tucson.stanford.edu:/home/akuam/spatial/apps/src/weights_output_hidden_final.csv", " ")
        val weights_oh_mem = DRAM[T](256, 256)
        setMem(weights_oh_mem, weights_oh_array)


		//calculate: input_gate, forget_gate, output_gate, memory_cell
		//input_gate = sigmoid(matrix_mult(input, getMatrix(weights_input_gate))
		//..

		//loop through window and call LSTMAccelerator
		//for (i < window_size) {
			//input = window(i)
			//val dram = LSTM(input_gate, other_gate .... output, state)
			//state = dram(0::256)
			//output = dram(256::512)
		//}

		//calculate prediction
		//prediction = 



	}


}
